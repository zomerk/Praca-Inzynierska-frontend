/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addRating } from '../fn/user-controller/add-rating';
import { AddRating$Params } from '../fn/user-controller/add-rating';
import { deleteFeedback } from '../fn/user-controller/delete-feedback';
import { DeleteFeedback$Params } from '../fn/user-controller/delete-feedback';
import { feedbackAfterTraining } from '../fn/user-controller/feedback-after-training';
import { FeedbackAfterTraining$Params } from '../fn/user-controller/feedback-after-training';
import { getRating } from '../fn/user-controller/get-rating';
import { GetRating$Params } from '../fn/user-controller/get-rating';
import { getTrainer } from '../fn/user-controller/get-trainer';
import { GetTrainer$Params } from '../fn/user-controller/get-trainer';
import { getTraining } from '../fn/user-controller/get-training';
import { GetTraining$Params } from '../fn/user-controller/get-training';
import { postComplaint } from '../fn/user-controller/post-complaint';
import { PostComplaint$Params } from '../fn/user-controller/post-complaint';
import { signUpToTrainer } from '../fn/user-controller/sign-up-to-trainer';
import { SignUpToTrainer$Params } from '../fn/user-controller/sign-up-to-trainer';

@Injectable({ providedIn: 'root' })
export class UserControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `signUpToTrainer()` */
  static readonly SignUpToTrainerPath = '/user/sign';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `signUpToTrainer()` instead.
   *
   * This method doesn't expect any request body.
   */
  signUpToTrainer$Response(params: SignUpToTrainer$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return signUpToTrainer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `signUpToTrainer$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  signUpToTrainer(params: SignUpToTrainer$Params, context?: HttpContext): Observable<{
}> {
    return this.signUpToTrainer$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getRating()` */
  static readonly GetRatingPath = '/user/rating';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRating()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRating$Response(params: GetRating$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getRating(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRating$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRating(params: GetRating$Params, context?: HttpContext): Observable<{
}> {
    return this.getRating$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `addRating()` */
  static readonly AddRatingPath = '/user/rating';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addRating()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addRating$Response(params: AddRating$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return addRating(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addRating$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addRating(params: AddRating$Params, context?: HttpContext): Observable<{
}> {
    return this.addRating$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `feedbackAfterTraining()` */
  static readonly FeedbackAfterTrainingPath = '/user/feedback';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `feedbackAfterTraining()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  feedbackAfterTraining$Response(params: FeedbackAfterTraining$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return feedbackAfterTraining(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `feedbackAfterTraining$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  feedbackAfterTraining(params: FeedbackAfterTraining$Params, context?: HttpContext): Observable<{
}> {
    return this.feedbackAfterTraining$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteFeedback()` */
  static readonly DeleteFeedbackPath = '/user/feedback';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteFeedback()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFeedback$Response(params: DeleteFeedback$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteFeedback(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteFeedback$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFeedback(params: DeleteFeedback$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteFeedback$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `postComplaint()` */
  static readonly PostComplaintPath = '/user/complaint';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postComplaint()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postComplaint$Response(params: PostComplaint$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return postComplaint(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `postComplaint$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postComplaint(params: PostComplaint$Params, context?: HttpContext): Observable<{
}> {
    return this.postComplaint$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getTraining()` */
  static readonly GetTrainingPath = '/user/training';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTraining()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTraining$Response(params?: GetTraining$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getTraining(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTraining$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTraining(params?: GetTraining$Params, context?: HttpContext): Observable<{
}> {
    return this.getTraining$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getTrainer()` */
  static readonly GetTrainerPath = '/user/trainer';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTrainer()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrainer$Response(params?: GetTrainer$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return getTrainer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTrainer$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrainer(params?: GetTrainer$Params, context?: HttpContext): Observable<boolean> {
    return this.getTrainer$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
