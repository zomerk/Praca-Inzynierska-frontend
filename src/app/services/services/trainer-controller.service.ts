/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addTraining } from '../fn/trainer-controller/add-training';
import { AddTraining$Params } from '../fn/trainer-controller/add-training';
import { deleteTraining } from '../fn/trainer-controller/delete-training';
import { DeleteTraining$Params } from '../fn/trainer-controller/delete-training';
import { getFeedback } from '../fn/trainer-controller/get-feedback';
import { GetFeedback$Params } from '../fn/trainer-controller/get-feedback';
import { getPaginatedTrainers } from '../fn/trainer-controller/get-paginated-trainers';
import { GetPaginatedTrainers$Params } from '../fn/trainer-controller/get-paginated-trainers';
import { getUser1 } from '../fn/trainer-controller/get-user-1';
import { GetUser1$Params } from '../fn/trainer-controller/get-user-1';
import { getUsersByTrainer } from '../fn/trainer-controller/get-users-by-trainer';
import { GetUsersByTrainer$Params } from '../fn/trainer-controller/get-users-by-trainer';
import { PageTrainer } from '../models/page-trainer';
import { PageUser } from '../models/page-user';

@Injectable({ providedIn: 'root' })
export class TrainerControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `deleteTraining()` */
  static readonly DeleteTrainingPath = '/trainer/deleteTraining';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTraining()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTraining$Response(params: DeleteTraining$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteTraining(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTraining$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTraining(params: DeleteTraining$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteTraining$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `addTraining()` */
  static readonly AddTrainingPath = '/trainer/addTraining';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addTraining()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addTraining$Response(params: AddTraining$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return addTraining(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addTraining$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addTraining(params: AddTraining$Params, context?: HttpContext): Observable<{
}> {
    return this.addTraining$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getPaginatedTrainers()` */
  static readonly GetPaginatedTrainersPath = '/trainer';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPaginatedTrainers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaginatedTrainers$Response(params?: GetPaginatedTrainers$Params, context?: HttpContext): Observable<StrictHttpResponse<PageTrainer>> {
    return getPaginatedTrainers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPaginatedTrainers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaginatedTrainers(params?: GetPaginatedTrainers$Params, context?: HttpContext): Observable<PageTrainer> {
    return this.getPaginatedTrainers$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageTrainer>): PageTrainer => r.body)
    );
  }

  /** Path part for operation `getUsersByTrainer()` */
  static readonly GetUsersByTrainerPath = '/trainer/users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUsersByTrainer()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsersByTrainer$Response(params?: GetUsersByTrainer$Params, context?: HttpContext): Observable<StrictHttpResponse<PageUser>> {
    return getUsersByTrainer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUsersByTrainer$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsersByTrainer(params?: GetUsersByTrainer$Params, context?: HttpContext): Observable<PageUser> {
    return this.getUsersByTrainer$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageUser>): PageUser => r.body)
    );
  }

  /** Path part for operation `getUser1()` */
  static readonly GetUser1Path = '/trainer/user';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUser1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUser1$Response(params: GetUser1$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getUser1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUser1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUser1(params: GetUser1$Params, context?: HttpContext): Observable<{
}> {
    return this.getUser1$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getFeedback()` */
  static readonly GetFeedbackPath = '/trainer/getFeedback';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFeedback()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFeedback$Response(params: GetFeedback$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getFeedback(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFeedback$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFeedback(params: GetFeedback$Params, context?: HttpContext): Observable<{
}> {
    return this.getFeedback$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
