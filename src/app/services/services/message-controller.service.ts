/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getChatHistory } from '../fn/message-controller/get-chat-history';
import { GetChatHistory$Params } from '../fn/message-controller/get-chat-history';
import { Message } from '../models/message';
import { sendMessageFromTrainerToUser } from '../fn/message-controller/send-message-from-trainer-to-user';
import { SendMessageFromTrainerToUser$Params } from '../fn/message-controller/send-message-from-trainer-to-user';
import { sendMessageFromUserToTrainer } from '../fn/message-controller/send-message-from-user-to-trainer';
import { SendMessageFromUserToTrainer$Params } from '../fn/message-controller/send-message-from-user-to-trainer';

@Injectable({ providedIn: 'root' })
export class MessageControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `sendMessageFromUserToTrainer()` */
  static readonly SendMessageFromUserToTrainerPath = '/chat/userToTrainer';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendMessageFromUserToTrainer()` instead.
   *
   * This method doesn't expect any request body.
   */
  sendMessageFromUserToTrainer$Response(params: SendMessageFromUserToTrainer$Params, context?: HttpContext): Observable<StrictHttpResponse<Message>> {
    return sendMessageFromUserToTrainer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendMessageFromUserToTrainer$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  sendMessageFromUserToTrainer(params: SendMessageFromUserToTrainer$Params, context?: HttpContext): Observable<Message> {
    return this.sendMessageFromUserToTrainer$Response(params, context).pipe(
      map((r: StrictHttpResponse<Message>): Message => r.body)
    );
  }

  /** Path part for operation `sendMessageFromTrainerToUser()` */
  static readonly SendMessageFromTrainerToUserPath = '/chat/trainerToUser';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendMessageFromTrainerToUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  sendMessageFromTrainerToUser$Response(params: SendMessageFromTrainerToUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Message>> {
    return sendMessageFromTrainerToUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendMessageFromTrainerToUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  sendMessageFromTrainerToUser(params: SendMessageFromTrainerToUser$Params, context?: HttpContext): Observable<Message> {
    return this.sendMessageFromTrainerToUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Message>): Message => r.body)
    );
  }

  /** Path part for operation `getChatHistory()` */
  static readonly GetChatHistoryPath = '/chat/history';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getChatHistory()` instead.
   *
   * This method doesn't expect any request body.
   */
  getChatHistory$Response(params: GetChatHistory$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Message>>> {
    return getChatHistory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getChatHistory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getChatHistory(params: GetChatHistory$Params, context?: HttpContext): Observable<Array<Message>> {
    return this.getChatHistory$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Message>>): Array<Message> => r.body)
    );
  }

}
